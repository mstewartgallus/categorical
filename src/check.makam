check : term -> term -> term -> prop.
wellformed : term -> prop.

check X A B :-
    domain X A,
    codomain X B,
    wellformed X.

wellformed (axiom _ _ _).

wellformed set.
wellformed object.

wellformed (id A) :-
    domain A terminal,
    wellformed A.
wellformed (compose F G) :-
    domain F T,
    codomain G T,
    wellformed F,
    wellformed G.

wellformed terminal.
wellformed (bang A) :-
    domain A terminal,
    wellformed A.

wellformed initial.
wellformed (absurd A) :-
    domain A terminal,
    wellformed A.

wellformed (forall A B) :-
    wellformed A,
    (x:term -> wellformed x -> domain x terminal -> codomain x A ->
         and (domain (B x) terminal)
         (wellformed (B x))).
wellformed (zeta A B) :-
    wellformed A,
    (x:term -> wellformed x -> domain x terminal -> codomain x A ->
         wellformed (B x)).
wellformed (pass F X) :-
    domain X terminal,
    codomain X A,
    codomain F (forall A _),
    wellformed F,
    wellformed X.

wellformed (exists A B) :-
    wellformed A,
    (x:term -> wellformed x -> domain x terminal -> codomain x A ->
         and (domain (B x) terminal)
         (wellformed (B x))).
wellformed (kappa A B) :-
    wellformed A,
    (x:term -> wellformed x -> domain x terminal -> codomain x A ->
         wellformed (B x)).
wellformed (lift F X) :-
    domain X terminal,
    codomain X A,
    domain F (exists A _),
    wellformed F,
    wellformed X.

wellformed (coforall A B) :-
    wellformed A,
    (x:term -> wellformed x -> codomain x initial -> domain x A ->
         and (domain (B x) terminal)
         (wellformed (B x))).
wellformed (cozeta A B) :-
    wellformed A,
    (x:term -> wellformed x -> codomain x initial -> domain x A ->
         wellformed (B x)).
wellformed (copass F X) :-
    codomain X initial,
    domain X A,
    domain F (coforall A _),
    wellformed F,
    wellformed X.

wellformed (coexists A B) :-
    wellformed A,
    (x:term -> wellformed x -> codomain x initial -> domain x A ->
         and (domain (B x) terminal)
         (wellformed (B x))).
wellformed (cokappa A B) :-
    wellformed A,
    (x:term -> wellformed x -> codomain x initial -> domain x A ->
         wellformed (B x)).
wellformed (colift F X) :-
    codomain X initial,
    domain X A,
    codomain F (coexists A _),
    wellformed F,
    wellformed X.

(* FIXME Add Normalization to Typechecking *)

(* Normalization *)

multistep : term -> term -> prop.

step : term -> term -> prop.
step_ : term -> term -> prop.

apply : term -> term -> term -> prop.

multistep X Z :-
    if step X Y
    then multistep Y Z
    else unify X Z.

step X Y :-
    if step_ X Y
    then success
    else structural @step_ X Y.

step_ (compose F G) Y :-
    apply F G Y.

step (lift (kappa A F) X) (F X) :-
    check X terminal A.
step (pass (zeta A F) X) (F X) :-
    check X terminal A.
step (colift (cokappa A F) X) (F X) :-
    check X A initial.
step (copass (cozeta A F) X) (F X) :-
    check X A initial.

apply (id A) X X :-
    check X _ A.
apply X (id A) X :-
    check X A _.

apply (bang B) X (bang A) :-
    check X A B.
apply X (absurd A) (absurd B) :-
    check X A B.

apply Y (lift F X) (lift (compose Y F) X).
apply (pass F X) Y (pass (compose F Y) X).

apply (colift F X) Y (colift (compose Y F) X).
apply Y (copass F X) (copass (compose F Y) X).

apply (zeta A F) X (zeta A (fun y => compose (F y) X)).
apply X (kappa A F) (kappa A (fun y => compose X (F y))).

apply X (cozeta A F) (cozeta A (fun y => compose X (F y))).
apply (cokappa A F) X (cokappa A (fun y => compose (F y) X)).
