(*
   Copyright 2021 Molly Stewart-Gallus

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*)
%use "src/ast".
%use "src/program".
%use "src/syntax".
%use "src/infer".
%use "src/check".
%use "src/integers".

exec : [A] instr A -> A -> prop.

run : program A -> A -> prop.
run (pure X) X.
run (bind Instr F) Y :-
    exec Instr X,
    run (F X) Y.
exec (nop X) X.
exec (check X A B) X :-
    check X A B.

eval_ : program term -> term -> term -> term -> prop.
eval_ Program A B Result :-
    run Program X,
    check X A B,
    multistep X Result.

typecheck_ : program term -> term -> term -> prop.
typecheck_ Program A B :-
    run Program X,
    check X A B.

typecheck : string -> string -> string -> prop.
typecheck Input AStr BStr :-
    isocast Input (Program : program term),

    (* for quick prototyping instead of implementing universes. *)

    (check object _ object ->
         typecheck_ Program A B),

    if refl.isunif A
            then unify AStr "_"
            else isocast (pure A) (AStr : string),

    if refl.isunif B
            then unify BStr "_"
            else isocast (pure B) (BStr : string).

eval : string -> string -> string -> string -> prop.
eval Input AStr BStr ResultStr :-
    isocast Input (Program : program term),

    (* for quick prototyping instead of implementing universes. *)

    (check object _ object ->
         eval_ Program A B Result),

    (* FIXME bind all free variables even within a term *)

    if refl.isunif A
            then unify AStr "_"
            else isocast (pure A) (AStr : string),

    if refl.isunif B
            then unify BStr "_"
            else isocast (pure B) (BStr : string),

    if refl.isunif Result
            then unify ResultStr "_"
            else isocast (pure Result) (ResultStr : string).

(* eval << lam "a" : * -> Set => lam "x" : * -> "a" => "x" >> Dom Cod Result ? *)
