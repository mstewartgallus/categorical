%use "ast".

%use "program".
%use "syntax".
%use "check".
%use "integers".

exec : [A] instr A -> A -> prop.

run : program A -> A -> prop.
run (pure X) X.
run (bind Instr F) Y :-
    exec Instr X,
    run (F X) Y.
exec (nop X) X.
exec (check X A B) X :-
    check X A B.

eval_ : program term -> term -> term -> term -> prop.
eval_ Program A B Result :-
    run Program X,
    check X A B,
    multistep X Result.

eval : string -> string -> string -> string -> prop.
eval Input AStr BStr ResultStr :-
    isocast Input (Program : program term),

    (* for quick prototyping instead of implementing universes. *)

    (check object _ object ->
         eval_ Program A B Result),

    (* FIXME bind all free variables even within a term *)

    if refl.isunif A
            then unify AStr "_"
            else isocast (pure A) (AStr : string),

    if refl.isunif B
            then unify BStr "_"
            else isocast (pure B) (BStr : string),

    if refl.isunif Result
            then unify ResultStr "_"
            else isocast (pure Result) (ResultStr : string).

eval << λ "a" : * → Set ⇒ λ "x" : * → "a" ⇒ "x" >> Dom Cod Result ?
